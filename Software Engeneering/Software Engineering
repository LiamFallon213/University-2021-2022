# Software Engineering

----
## 8-31-2021

### Software development life cycle (SDLC) process

1. Gather requirements
2. Design
3. Development
4. Testing
5. Deploy
6. Maintenance

### Waterfall Model
Requirements -> Design -> Development -> Testing -> Maintenance

You don't ever go back a step

#### Pros
* Requirements and other previous steps never change

#### Cons
* Inflexible

### Divide and Conquer

Split problem into smaller problems
* Have you seen similar problems before

* Have similar problems been solved before
* Can sub problems be defined
* Can you represent a solution in a manner that leads to effective implementation

### Carry out the plan
* Does the solution conform to the plan

* Is each component part of the solution provably correct
 * Unit Testing: test each individual part

 * Integration testing: test the interactions between parts

### Examine the results
* Is it possible to test each component part of the solution
---
 ## 9-7-21

 ### Homework
 - ok to copy paste definition if sourced

  - Coupling: (definition)

- more resources on prescribed lifecycles
 - Standard Software Development Lifecycles

 - Waterfall Model, Formal Methods, SDLC
 - Provide an exact example for lifecycles

 #### Citations
 EX: "Link: www.stackoverflow.com‎ "

### Lecture
#### Unified Modeling Language (UML)
- Modeling Language

 - Something that describes your system

 - Plain language
 - Psudocode
 - Code
 - Pictures
 - Diagrams
- UML is the Standard modeling Language
 - Helps remove ambiguity


- Software spans from small to extremely complex systems

- UML helps with three questions
 - How do you keep track of which components are needed?
 - What the components jobs are?

 - How are the components communicating with each other?
- There are too many moving parts to developing a large system without help.
| Logical View | Process View |
| ------------ | ------------ |
| **Development View**|**Physical View**|

##### Logical View
- Describes abstractions of a system's parts

- Used to model what makes up a system and how the parts interact
- UML Diagrams in this view tend to be
 - Class

 - Object
 - State Machine
 - Interaction Diagrams
- Gives logical perspective on the system

##### Process View
- Describes the processes and actions inside the systems
- Particularly helpful when visualizing what must happen within your system.

- Usually contains activity diagrams.
- Which actions you need to preform to preform some specific activity
- X -> Y -> Z

##### Development View
- Describes how your systems parts are organized into modules and components.

- Very useful to manage layers within system architecture.
- Typically contains package and component diagrams

##### Physical View
- IRL components
---
# 9-16-21

## Agile Software Development

- The customer is part of the dev team

### SCRUM

- Team is 3-12 members

 - Size is good for resource managment

#### Sprint
- Sprint length 2-6 weeks

- Some time where you have a set goal
- Focused on achiving some goal
- We need to complete X in the next X time period
- Backlog
 - List of tasks

 - Can create a sprint out of backlog
- After sprint then Testing

- Demo to customer
- SCRUM Meeting

- Scope<->Priority<->Estimate
 - Triangle


### Devops

### Devsec ops
